Java OOPs

What is an Object ?
How Object defined in Java?
Employee
name
job id
workarea function

Class Employee {
String name;
void work_area() {
}
}

how to write a method signature
accessmodifier returntype methodname(datatype parameter1, datatype p2,...) {

statements
}

Inheritance
when we need the properties to be reused we use inheritance

this
---reference to the current object
how do you implement inheritance in Java ?
extends keyword
Multiple inheritance
Multilevel inheritance

Employee
salary
      Developer
           bonus

package
----community
logical grouping of entities for clear segregation

- all will be in lowercase
-every package is a directory structure
- all entity or object within the package will be uniquely identified with name

In Java, by default the class extends the base class called
Object defined in java.lang

import package.className;
import package.*;
it will get the classes from that package


--------------JavaClass.java--------
package packagename;
import statements
class A { 
   A(){} 
  A(int a) { } 
}
class B {    }
public class JavaClass {
  public static void main(String ar[]) {
  }
}
//- single line comment
/*
multiple lines of comment
*/
---------------------------------------
Whenever parameterised is defined default constructor will not be added by the jvm/compile time

----------------

method overloaded- in same class
returntype methodname(dt1 var1, dt2 var2){
}
for parameters
1.  method overloading can be with different datatypes
2. order of datatypes can be different.
in calculator class
1.add(int, int)  add(int, int, float)  
2.add(float, int,int)   add( int, float, int)


void calcSalary(){
totSal = salary +100;
    	System.out.println("Total salary in Super class = "+totSal);
}
void calcSalary(int conveyance){
totSal = salary +conveyance;
System.out.println("Total salary in Super class = "+totSal);
}
------------------------------------------
method overridding --- is always with inheritance
When a method in the parent class is defined again in the child class with the same signature but with different logic
it is termed as method overridding.

----------------------
static keyword
variable, method, block, nested class
--------------------
final
variable - it means the value once assignment cannot be changed
method - it means method cannot be overridden
class - it means Class cannot be subclassed

--------------------------
interfaces - multiple inheritance
aggregation
abstract class
wrapper class

--------------------------Jan 5 2018-------
interfaces - multiple inheritance
abstract class
aggregation
wrapper class
operators
control flow statements
visibility modifiers
--------------------------------------------------
multi-level inheritance
there is only one base and the child implement other parent classes
In Java multi-level inh is achieved using Interfaces
In an interface
- variables which are constants
- method signature

basic calculator
int add() { }
int sub() 
----------------------
car
enginepower
void start();
void stop();
void power();
drivePattern();

---------------------
Animal
walking() { }
diet()
no of legs =4
-----------------------
Interfaces are like template or skeleton where it defines the structure of the object
accessmodifier interface InterfaceName {
datatype variable=value;

returntype methodname(arguments);

}
---------------------Vehicle.java-------------------
interface Vehicle {
//static final noOfWheels;
void start();
void stop();
void drivePattern();
}
-----------------------------------------
class Car {
int power = 2;
int noOfSeats;
void engineWorking() {
  sysout ();
}
void power() {
sysout()
}

class Toyota extends Car implements Vehicle {
  void start() { syout (); }
void stop() { syout (); }
void drivePattern(){ syout (); }
}
------------------------------
abstract class - few methods are implemented 
and few other method only signature is available

calculator
add
sub
multiple
abstract memoryPlus
abstract memoryMinus
abstract memoryRecall
public abstract  class  BasicCalculator{
int result;
//static final int var = 0;
//literal it means variable
 public int add(int a, int b) {  
      return a+b;
     }
public int sub(int a, int b) {  
      return a-b;
     }
public void memoryPlus();
public void memoryMinus();

}
----------access modifiers------------------------
access modifiers are for class, method and variables
public - it is visible to all class in your project 
private - it  is visible only to the current class
protected - it is visible to current class and all child classes within the same package or across packages
default - it is visible to current class and child class within the same package

Encapsulation
Combining /Encapsulate the properties and behaviour of an object in a single entity where data hiding is also implemented.
--------------------------------
Aggregation
it uses contains
A class contain other classs as a property.
obj.varible = new ClassName();
obj.variable.method

A Class can implement any number of Interfaces
---------------------------------
Encapsulation
Interface

interface Interface1 {}

interface Shape {

float area();
double perimeter();

} 


class A{ }

class Square extends A implements Shape, Interface1 {
private float length, breadth;
 
public float area()
{
 return length * breadth;

}

double perimeter()
{
  return length + breadth;
}


public void setLength(float len) {
   length = len;
}

public float getLength() {
  return length;
}
public void setBreadth(float brd) {
   breadth = brd ;
}

public float getBreadth() {
  return breadth;
}


}
--------------------


















